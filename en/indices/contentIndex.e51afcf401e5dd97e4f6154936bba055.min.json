{"/zh-cn/":{"title":"yinzhang.win","content":"你好，每个远道而来的探险家，这里是漂浮在浩瀚互联网世界的一座数字花园。神奇的链接 yinzhang.win 像窗户一样让每个人可以一窥花园里的风景。\n\n这里陈列着 yinzhang 的学习与思考，倘若其中有一物可以帮助到你，这将是他莫大的荣幸。 \n","lastmodified":"2023-08-02T07:55:31.274056124Z","tags":[]},"/zh-cn/books":{"title":"Booklist","content":"## 待读列表\n\n### 小说\n\n### 非小说\n\n## 在读列表\n\n- 羊毛战记三部曲，休·豪伊\n- 第二性，西蒙娜·德·波伏瓦\n\n## 已读列表\n\n### 2023\n\n- 长日将尽，石黑一雄\n- 远山淡影，石黑一雄\n\n### 2022\n\n- 1984，乔治·奥威尔\n- 成为波伏瓦，凯特·柯克帕特里克\n- 献给阿尔吉侬的花束，丹尼尔·凯斯\n\n### 2021\n\n- 失明症漫记，若泽·萨拉马戈\n- 悉达多，赫尔曼·黑塞\n- 卡片笔记写作法：如何实现从阅读到写作，申克·阿伦斯\n- 科学之路，杨立昆\n- 西线无战事，埃里希·玛丽亚·雷马克\n- UNIX 传奇：历史与回忆，布莱恩·W·克尼汉\n- 在线广告：互联网广告系统的架构与算法，张亚东\n- 树上的男爵，伊塔洛·卡尔维诺\n- 百年孤独，加西亚·马尔克斯\n\n### 2020\n\n- 少年维特的烦恼，歌德\n- 动物庄园，乔治·奥威尔\n- 1984，乔治·奥威尔\n- 了不起的盖茨比，弗朗西斯·斯科特·菲茨杰拉德\n- 香农传，杰米·索尼，罗伯特·古德曼\n- 挪威的森林，村上春树\n- 白银时代，王小波\n- 黄金时代，王小波\n- 认识建筑：丰子恺建筑六讲，丰子恺\n- 围城，钱钟书\n- 一句话顶一万句，刘震云\n- 国家记忆：中国国家画报的封面故事，人民画报社\n- 白鹿原，陈忠实\n- 跟着马克 吕布拍中国，肖全\n- 中国哲学简史，冯友兰\n- 鼠疫，加谬\n- 霍乱时期的爱情，加西亚·马尔克斯\n- 小狗钱钱，博多·舍费尔","lastmodified":"2023-08-02T07:55:31.274056124Z","tags":[]},"/zh-cn/entities/apfs-fuse":{"title":"apfs-fuse","content":"## Guide\n\n使用 `apfs-fuse` 让 Ubuntu 挂载 APFS 硬盘\n\n```bash\nsudo apt update\n# 必要前置包\nsudo apt install fuse3 libfuse3-dev bzip2 libbz2-dev cmake gcc g++ git libattr1-dev zlib1g-dev\n# 安装 apfs-fuse\ngit clone https://github.com/sgan81/apfs-fuse.git\ncd apfs-fuse\ngit submodule init \u0026\u0026 git submodule update\nmkdir build\ncd build\ncmake ..\nmake\n# 将 bin 移到 usr 目录下，修改权限\nsudo cp apfs* /usr/local/bin\nsudo chown root:root /usr/local/bin/apfs*\n# 挂载 /dev/sda2\nsudo apfs-fuse -o allow_other /dev/sda2 /mnt\numount /mnt\n```\n\n## References\n\n- [apfs-fuse](https://tutorialforlinux.com/2022/01/17/apfs-fuse-ubuntu-22-04-installation-step-by-step/)","lastmodified":"2023-08-02T07:55:31.274056124Z","tags":["entity"]},"/zh-cn/entities/conda":{"title":"conda","content":"\n- 基础配置\n\n```bash\ncat ~/.condarc\n# 自动启动 conda 环境，设置关闭，防止系统 python 被污染\nauto_activate_base: False\nenvs_dirs:\n  - /platform_tech/zhangyin/conda_resource/envs/\npkgs_dirs:\n  - /platform_tech/zhangyin/conda_resource/pkgs/\n```\n\n- 常用命令\n\n```bash\n# 创建环境\nconda create -n env_name python=3.8\n# 删除环境\nconda env remove -n env_name\n# 复制环境\nconda create -n env_name --clone old_env_name\n```\n\n## References\n\n1. [conda document](https://docs.conda.io/projects/conda/en/stable/index.html)","lastmodified":"2023-08-02T07:55:31.274056124Z","tags":["entity","dev-ops"]},"/zh-cn/entities/escape-character":{"title":"escape character","content":"\n转义字符（escape character）是用于表示一些特殊字符的字符或字符序列。它们以反斜杠（\\）开头，并在后面跟着另一个字符或字符序列。当遇到转义字符时，计算机会将其解释为特殊的含义，而不是字面意义。\n\n常见的转义字符包括：\n\n- \\n：换行符\n- \\t：制表符\n- \\r：回车符\n- \\\\：反斜杠\n- \\'：单引号\n- \\\"：双引号\n\n举个例子，如果想在字符串中表示一个换行符，可以使用转义字符 \"\\n\"。例如，字符串 \"Hello\\nWorld\" 会在 \"Hello\" 与 \"World\" 之间插入一个换行符，使其显示为两行： \n\n```bash\nHello\nWorld\n```","lastmodified":"2023-08-02T07:55:31.274056124Z","tags":["entity","computer-science"]},"/zh-cn/entities/mixin":{"title":"mixin","content":"\nCFW 的 mixin 可以实现在机场基础上进一步制定规则。  \n由于有对更方便的使用 ChatGPT 的需求，不希望频繁切换节点，可以通过 mixin 实现\n\n```javascript\nmodule.exports.parse = ({ content }) =\u003e {\n  const mustHaveKeywords = ['美国', 'United States']\n  // 过滤掉美国节点中，包含以下关键字的节点（低质量节点）,每一项为正则，忽略大小写\n  const mustNotHaveKeywords = ['实验性', '0\\\\.', 'b']\n\n  const regexParts = []\n  mustHaveKeywords.forEach(keyword =\u003e {\n    const mustNotHavePart = mustNotHaveKeywords.map(k =\u003e `(?!.*${k})`).join('')\n    regexParts.push(`(?=.*${keyword}${mustNotHavePart}).*`)\n  })\n  const regex = new RegExp(`^(${regexParts.join('|')})$`, 'i')\n\n  const rules = [\n    'DOMAIN-KEYWORD,cloudfare,ChatGPT',\n    'DOMAIN-KEYWORD,openai,ChatGPT',\n    'DOMAIN-KEYWORD,sentry,ChatGPT',\n    'DOMAIN-SUFFIX,ai.com,ChatGPT',\n    'DOMAIN-SUFFIX,auth0.com,ChatGPT',\n    'DOMAIN-SUFFIX,challenges.cloudflare.com,ChatGPT',\n    'DOMAIN-SUFFIX,client-api.arkoselabs.com,ChatGPT',\n    'DOMAIN-SUFFIX,events.statsigapi.net,ChatGPT',\n    'DOMAIN-SUFFIX,featuregates.org,ChatGPT',\n    'DOMAIN-SUFFIX,identrust.com,ChatGPT',\n    'DOMAIN-SUFFIX,ingest.sentry.io,ChatGPT',\n    'DOMAIN-SUFFIX,intercom.io,ChatGPT',\n    'DOMAIN-SUFFIX,intercomcdn.com,ChatGPT',\n    'DOMAIN-SUFFIX,openai.com,ChatGPT',\n    'DOMAIN-SUFFIX,openaiapi-site.azureedge.net,ChatGPT',\n    'DOMAIN-SUFFIX,stripe.com,ChatGPT',\n  ]\n  const proxies = content.proxies\n    .filter(e =\u003e regex.test(e.name))\n    .map(e =\u003e e.name)\n  const groups = content['proxy-groups']\n\n  const newGroup = {\n    name: 'ChatGPT',\n    type: 'select',\n    proxies,\n  }\n\n  if (groups.length \u003e 1) {\n    groups.splice(1, 0, newGroup)\n    content.rules = rules.concat(content.rules)\n  }\n  return content\n}\n```\n\n## References\n\n1. \u003chttps://github.com/Fndroid/clash_for_windows_pkg/issues/4568\u003e\n1. \u003chttps://github.com/JeffersonQin/clash-multi-mixin\u003e","lastmodified":"2023-08-02T07:55:31.274056124Z","tags":["entity","dev-ops"]},"/zh-cn/entities/rsync":{"title":"rsync","content":"## 用法\n\n### 基本复制\n\n```bash\nrsync -a /source/path /dest/path # 将 src 同步至 dest\nrsync -a /source1/path /source2/path /dest/path # 将多个 src 同步至 dest\n-a # 递归同步，并同步元信息（如修改时间、权限），更为常用\n-r # 递归同步，不同步元信息\n-n # 模拟执行结果\n-v # 将执行结果输出至终端\n-z # 同步时压缩数据\n--delete # 默认情况下，rsync 只同步，而不检查目录是否相同，该参数可以使得目标目录成为原目录的镜像副本，数据删除只发生在目标目录\n--append-verify # 断点续传并校验 \n```\n\n### 排除文件\n\n```bash\n--exclude # 可以指定排除的模式\n# 过滤所有 txt 文件\nrsync -av --exclude='*.txt' /source/path /dest/path \n# 由于 rsync 也会同步 . 开头的隐藏文件，可以如下排除隐藏文件\nrsync -av --exclude='*.' /source/path /dest/path \n# 同时使用多个排除模式\n# 还可以使用 --exclude={'file1.txt','dir1/*'}\n# 以及文件规则 --exclude-from='exclude-file.txt'\nrsync -av --exclude='file1.txt' --exclude='dir1/*' /source/path /dest/path \n--incloude # 必须包含的文件，和 --exclude 组合使用\n# 排除除 txt 文件以外的所有文件\nrsync -av --include=\"*.txt\" --exclude='*' /source/path /dest/path \n```\n\n### 远程同步\n\n```bash\n# 使用 ssh 协议同步, -e ssh 可以忽略\nrsync -av -e ssh /source/path user@remote:/dest/path\nrsync -av user@remote:/source/path user@remote:/dest/path\n# 额外附加 ssh 参数，-e ssh 不可忽略\nrsync -av 'ssh -p 2234' /source/path user@remote:/dest/path\n# rsync 协议\nrsync -av /source/path 192.168.ab.cd::module/dest/path\n```\n\n### 增量备份\n\n```bash\n# 指定同步时的基准目录\nrsync -a --delete --link-dest /compare/path /source/path /dest/path \n--link-dest # 指定比较基准目录 /compare/path，/source/path 与 /compare/path 比较后，将内容复制到 /dest/path \n```\n\n一个备份用户主目录的脚本实例\n每一次同步都会生成一个新目录 `${BACKUP_DIR}/${DATETIME}`，并将软链接 `${BACKUP_DIR}/latest` 指向这个目录。下一次备份时，就将 `${BACKUP_DIR}/latest` 作为基准目录，生成新的备份目录。最后，再将软链接 `${BACKUP_DIR}/latest` 指向新的备份目录。\n\n```bash\n#!/bin/bash\n\n# A script to perform incremental backups using rsync\n\nset -o errexit\nset -o nounset\nset -o pipefail\n\nreadonly SOURCE_DIR=\"${HOME}\"\nreadonly BACKUP_DIR=\"/mnt/data/backups\"\nreadonly DATETIME=\"$(date '+%Y-%m-%d_%H:%M:%S')\"\nreadonly BACKUP_PATH=\"${BACKUP_DIR}/${DATETIME}\"\nreadonly LATEST_LINK=\"${BACKUP_DIR}/latest\"\n\nmkdir -p \"${BACKUP_DIR}\"\n\nrsync -av --delete \\\n  \"${SOURCE_DIR}/\" \\\n  --link-dest \"${LATEST_LINK}\" \\\n  --exclude=\".cache\" \\\n  \"${BACKUP_PATH}\"\n\nrm -rf \"${LATEST_LINK}\"\nln -s \"${BACKUP_PATH}\" \"${LATEST_LINK}\"\n```\n\n## References\n\n- [rsync 用法教程](https://www.ruanyifeng.com/blog/2020/08/rsync.html)","lastmodified":"2023-08-02T07:55:31.274056124Z","tags":["entity","dev-ops"]},"/zh-cn/entities/unix-tools":{"title":"unix tools","content":"## Guide\n\n基础但常用的 Unix 工具\n\n- 磁盘\n\n```\n# 查看当前路径空间总体占用\ndu -sh /path/to/know\n```\n\n- 压缩、解压\n\n```bash\n# 分卷压缩\ntar czf - test | split -b 1G - test.zip\n# 合并 并解压\ncat test.zip* \u003e test.zip unzip\n# tar\ntar cfz bigfile.tgz bigfile\n# zip \nzip ./bigfile.zip bigfile\n# gzip 就地压缩，原文件被压缩文件替换\ngzip bigfile\n# bzip2 类似 gzip\nbzip bigfile\n# xz 类似 gzip 花费更多时间，压缩率更高\nxz bigfile\n```\n\n- macOS 相关\n\n```bash\n# 允许运行未签名 app\nsudo xattr -r -d com.apple.quarantine /Applications/any.app\n```\n\n## References\n\n- [在 Linux 上压缩文件的 5 种方法](https://linux.cn/article-12190-1.html)","lastmodified":"2023-08-02T07:55:31.274056124Z","tags":["entity","dev-ops"]},"/zh-cn/graphs/frp-and-its-thinks":{"title":"frp and its thinks","content":"## 缘起\n\n课题组远程访问内网服务器一直是一个需要解决的问题。去年，我们使用向日葵、花生壳等软件，由于各种限制最后都没有继续用下去。最后决定使用一台拥有公网 IP 的云服务器，配置 frp 服务，并实现多台内网服务器的远程 ssh 功能。\n\n## FRP 简介\n\nfrp 是一个专注于内网穿透的高性能反向代理应用，支持 TCP、UDP、HTTP、HTTPS 等多种协议。可以将内网服务以安全、便捷的方式通过具有公网 IP 节点的中转暴露到公网。\n\n通过在具有公网 IP 的节点上部署 frp 服务端，可以轻松地将内网服务穿透到公网，同时提供诸多专业的功能特性，客户端服务端通信支持 TCP、KCP 以及 Websocket 等多种协议。\n\n由于需求是实现远程 ssh，只会用到 TCP 协议，并且 frp 采用 Golang 实现，支持跨平台，单纯使用不需要额外依赖。所以使用 frp 可以很好的满足我们的需求。\n\n## FRP 部署\n\n1. 可以在 Github 的 [Release](https://github.com/fatedier/frp/releases) 内下载，注意要按照自己的平台选择下载相应编译版本；\n1. 在自己的 PC 机解压下载好的应用程序；\n1. 分别向云服务器与需要内网穿透的服务器上发送应用程序。这里，云服务器作为服务端，发送的是「frps」与「frps.ini」两个文件，而需要内网穿透的服务器作为客户端发送的是「frpc」与「frpc.ini」两个文件，这里的文件可以放在任意位置，并按需要给予文件相应的读写权限；\n1. frp 的配置文件是「\\*.ini」的两个文件，按照自己的需要修改对应内容以满足功能需求，所有可以配置的文件可以在「\\*_full.ini」中，我们按照基础的远程 ssh 功能配置以上两个文件；\n1. 对于服务端，我们使用基础配置；\n\n    ```shell\n    [common]\n    bind_port = 7000\n    ```\n\n1. 对于客户端，我们同样使用基础配置；\n\n    ```shell\n    [common]\n    server_addr = xx.xx.xx.xx # 服务端的公网 IP\n    server_port = 7000        # 与bind_port 保持一致\n    \n    [ssh]\n    type = tcp                # 协议，ssh 使用 tcp 传输\n    local_ip = 127.0.0.1      # 表示本机，目测可以使用 0.0.0.0 代替\n    local_port = 22           # 默认的 ssh 端口\n    remote_port = 6000        # 云服务器监听转发的端口\n    ```\n\n1. 首先在服务端运行 frps，\n\n    ```shell\n    ./frps -c ./frps.ini # -c 是指按照 config 文件配置服务端\n    ```\n\n    ![image-20211212152718591](https://blog-1254050354.cos.ap-nanjing.myqcloud.com/img/blog/2021-12/image-20211212152718591-0d461e.png)\n\n    当出现 frps 启动成果时，服务端配置完毕，这时服务器在 `bind_port` 端口上会持续监听客户端的登陆；\n\n1. 接着在客户端运行 frpc\n\n    ```shell\n    ./frpc -c ./frpc.ini # -c 是指按 config 文件配置服务端\n    ```\n\n    首先我们看服务端现象，服务端提示有 [ssh] 请求成果\n\n    ![image-20211212154437017](https://blog-1254050354.cos.ap-nanjing.myqcloud.com/img/blog/2021-12/image-20211212154437017-8deec4.png)\n\n    接着我们看启动后的客户端现象，客户端提示有 [ssh] 代理成功\n\n    ![image-20211212154647802](https://blog-1254050354.cos.ap-nanjing.myqcloud.com/img/blog/2021-12/image-20211212154647802-ab4598.png)\n\n    此时，服务端与客户端已经建立链接，此时使用外网的 PC 机，便可以经过服务端的反向代理访问到客户端的内网服务器；\n\n1. 我们使用 ssh 指令验证结果，`-oPort=remote_port`，`username` 为内网服务器用户名，`serverip` 为云服务器外网 IP\n\n    ```shell\n    ssh -oPort=xxxx username@serverip \n    ```\n\n    ![image-20211212162941720](https://blog-1254050354.cos.ap-nanjing.myqcloud.com/img/blog/2021-12/image-20211212162941720-e4021c.png)  \n    可以访问。\n\n## 一些思考\n\n1. 我们设计一个小实验说明一下 frp 究竟做了些什么，首先我们定义实验拓扑关系：  \n    ![image-20211212162248229](https://blog-1254050354.cos.ap-nanjing.myqcloud.com/img/blog/2021-12/image-20211212162248229-49f776.png)\n\n1. 验证如下：  \n    远程 PC ping 云服务器结果，可以通\n\n    ![image-20211212161659834](https://blog-1254050354.cos.ap-nanjing.myqcloud.com/img/blog/2021-12/image-20211212161659834-2dc88d.png)\n\n    远程 PC ping 客户端内网服务器结果，无法通\n\n    ![image-20211212161930369](https://blog-1254050354.cos.ap-nanjing.myqcloud.com/img/blog/2021-12/image-20211212161930369-d095e0.png)\n\n    服务端云服务器 ping 客户端内网服务器结果，无法通\n\n    ![image-20211212162051173](https://blog-1254050354.cos.ap-nanjing.myqcloud.com/img/blog/2021-12/image-20211212162051173-e3e1ac.png)  \n    客户端内网服务器 ping 服务端云服务器结果，可以通\n\n    ![image-20211212162232336](https://blog-1254050354.cos.ap-nanjing.myqcloud.com/img/blog/2021-12/image-20211212162232336-042656.png)\n\n    结果符合预期；\n\n1. frp 是怎样通过反向代理，使得远程 PC 机可以访问内网服务器的呢？我们以下图解释  \n    ![image-20211212163946233](https://blog-1254050354.cos.ap-nanjing.myqcloud.com/img/blog/2021-12/image-20211212163946233-228fa3.png)  \n    首先，我们看服务端和客户端之间的关系，服务端开放监听 `band_port` ，由于客户端可以 ping 通服务端，所以通过 `bind_port` 服务端可以将信息在该端口传输至客户端，至此「反向代理」的信息通路搭建。接着，由于 PC 机可以访问服务端，而服务端开放监听 `remote_port` ，因此当 PC 向服务端发送的信息就会被 frp 通过 `bind_port` 转发至客户端的 22 端口，即默认的 ssh 端口，因此远程 ssh 成功。\n\n## 一些经验\n\n- 基于思考实验我们可以得出，对于云服务器有两个端口是非常重要的，一是 `band_port` ，其决定了服务端和客户端的通信，二是 `remote_port` ，其决定了远程 PC 机和服务端的通信。因此，在许多云服务器供应商的防火墙策略中，要记得把这两个参数设置成对 TCP 协议开放，大多数无法成功远程的原因都在于防火墙没有开放。\n- frp 当前版本 `0.38.0` 文件中有一个 systemmd 文件夹，这个文件夹内有一些内置的 server 文件，这些文件可以很方便的使用 Linux 与 macOS 的 systemctl 部署成系统级服务，其步骤如下：\n\n    1. 将服务端或客户端对应的 `*.service` 文件复制到 `/etc/systemd/system/` 内；\n    1. 修改 `ExecStart=` 的值，与之前启动 frp 的指令相同，`/your/frp/path/frpc -c /your/frp/path/frpc.ini` 并注意要使用绝对路径；\n\n        ```shell\n        ExecStart= /your/frp/path/frpc -c /your/frp/path/frpc.ini #修改这个\n        sudo systemctl enable frps # 服务端设置开机启动\n        sudo systemctl enable frpc # 客户端设置开机启动\n        \n        sudo systemctl start frps # 服务端开启服务\n        sudo systemctl start frpc # 客户端开启服务\n        ```\n\n    1. 我们还可以使用以下指令查看 frp 的运行状态如下\n\n        ```shell\n        service frps status\n        service frpc status\n        ```\n\n        ![image-20211212194739137](https://blog-1254050354.cos.ap-nanjing.myqcloud.com/img/blog/2021-12/image-20211212194739137-61b713.png)\n\n## 参考文献\n\n1. [frp 官方文档](https://gofrp.org/docs/)\n1. [自己动手部署内网穿透：frp](https://zhuanlan.zhihu.com/p/341551501)","lastmodified":"2023-08-02T07:55:31.274056124Z","tags":["graph","dev-ops"]},"/zh-cn/graphs/obsidian-linter":{"title":"obsidian linter","content":"## 关于 obsidian-linter\n\n[obsidian-linter](https://github.com/platers/obsidian-linter) 是 Obsidian 的内容格式化工具。可以用于格式化 YAML、脚标、标题、空格、数学块与 Markdown 内容，同时可以自定义格式化规则。这意味着 obsidian-linter 不仅可以处理好「格式化」内容的本质工作，还可以用来方便地更新 Obsidian 文件的 YAML 元数据，这为高效撰写笔记提供了许多便利。但是，obsidian-linter 也并非银弹，写作时保持稳定的写作风格比完全依赖工具要重要得多。\n\n因此，Yin 希望 obsidian-linter 可以完成以下目标：\n- 格式化笔记内容\n\t- 使得文档内 Markdown 风格统一\n\t- 使得文档内空行，字符间空格风格统一\n\t- 使得文档内排版，尤其是中英文混排时风格统一\n- 更新笔记元数据\n\t- 使得 YAML 风格统一\n\t- 自动更新 YAML 元数据\n\n统一的 Obsidian 文档格式有利于内容在各个平台发布时的一致性，同时降低了引入 `git` 等版本管理工具的后续维护成本。接着 Yin 将按照目标配置 obsidian-linter。\n\n## 具体设置\n\n本节将会列出用到的具体设置项目，简要介绍并给出使用理由。由于 YAML 相关设置较为复杂，将在本文最后介绍。\n\n### General\n\n- Lint on save\n\t- 在保存时格式化\n\t- 启用。保证落盘时文件的一致性，并更新如最新一次编辑等元信息\n- Display message on lint\n\t- linting 后显示改变的字符数量\n\t- 启用。日志功能\n- Folder to ignore\n\t- 需要忽略的文件夹\n\t- 启用。建议将模板等不需要格式化与元数据更新的文件夹加入，注意每个文件夹之间使用行分隔\n- YAML aliases section style\n\t- YAML aliases 部分风格\n\t- multi-line。使用多行风格\n- YAML tags section style\n\t- YAML tags 部分风格\n\t- multi-line。使用多行风格\n- Remove Unnecessary Escape Characters when in MultiLine Array Format\n\t- 多行风格的 [转义字符](entities/escape-character.md)\n\t- 开启。多行风格需要\n\n### Heading\n\n- header-increment\n\t- Heading levels should only increment by one level at a time\n\t\t- Heading 级别每次只提升一个级别\n\t\t- 开启。防止 Heading 错乱\n\t- Start Header Increment at Heading Level 2\n\t\t- 文档内 Heading 级别最小为 2\n\t\t- 开启。文档中只有标题为一级标题\n- headings-start-line\n\t- Headings that do not start a line will have their preceding whitespace removed to make sure they get recognized as headers.\n\t\t- 去除标题标识符 `#` 前的空格\n\t\t- 开启。保持 Heading 行格式统一\n\n### Footnote\n\n- move-footnotes-to-the-bottom\n\t- 将脚注移到文档最后\n\t- 开启。在笔记级别的文档长度下，将脚注移到文档最后似乎是个还算合理的选择\n- re-index-footnotes\n\t- 按照出现顺序重现排列脚注\n\t- 开启。如出现 bug 考虑关掉该选项\n\n### Content\n\n- blockquote-style\n\t- Makes sure the blockquote style is consistent\n\t\t- 保持 blockquote 风格一致\n\t\t- 开启，且使用 space 风格。\n- convert-bullet-list-markers\n\t- Converts common bullet list marker symbols to markdown list markers\n\t\t- 将 bullet list 风格转为 Markdown list 风格\n\t\t- 开启\n- emphasis-style\n\t- Makes sure the emphasis style is consistent\n\t\t- 保持强调风格一致\n\t\t- 开启，且使用 asterisk * 风格\n- no-bare-urls\n\t- Encloses bare URLs with angle brackets except when enclosed in back ticks, square braces, or single or double quotes\n\t\t- 保证 url 都有描述内容\n\t\t- 开启。保证 url 质量\n- ordered-list-style\n\t- Makes sure that ordered lists follow the style specified.\n\t\t- 保持有序列表风格一致，且保持 lazy\n\t\t- 开启。保存有序列表风格一致，lazy 可以减少修改字符数\n- quote-style\n\t- Updates the quotes in the body content to be updated to the specified single and double quote styles\n\t\t- 保持 quote 完整\n\t\t- 开启。启用单 quote 风格，使用 `\"` 作为标记\n- remove-consecutive-list-markers\n\t- Removes consecutive list markers. Useful when copy-pasting list items\n\t\t- 当复制时，去除 list 标记\n\t\t- 开启。减少手动删除文字前标记的麻烦\n- remove-empty-list-markers\n\t- Removes empty list markers\n\t\t- 移除空 list 标记\n\t\t- 开启\n- remove-hyphenated-line-breaks\n\t- Removes hyphenated line breaks\n\t\t- 移除连接符\n\t\t- 开启\n- remove-multiple-spaces\n\t- Removes two or more consecutive spaces\n\t\t- 移除多余空格\n\t\t- 开启\n- strong-style\n\t- Makes sure the strong style is consisten\n\t\t- 强烈确保风格一致\n\t\t- 开启\n- unordered-list-style\n\t- Makes sure that unordered lists follow the style specified\n\t\t- 确保无序列表风格一致\n\t\t- 开启。无序列表标示为 `-`\n\n### Spacing\n\n- compact-yaml\n\t- Removes leading and trailing blank lines in the YAML front matter\n\t\t- 去除 YAML 中的空行\n\t\t- 开启\n- consecutive-blank-lines\n\t- There should be at most one consecutive blank line\n\t\t- 行之间只存在一个空行\n\t\t- 开启\n- empty-line-around\n\t- Ensures that there is an empty line around things unless they start or end a document\n\t- 确保内容周围有空行包围\n\t\t- blockquotes。开启\n\t\t- code。开启\n\t\t- math。开启\n\t\t- table。开启\n- heading-blank-lines\n\t- All headings have a blank line both before and after (except where the heading is at the beginning or end of the document)\n\t\t- 除开始或结尾的 heading 以外，其余 heading 均被空行包围\n\t\t- 开启。但关闭 Empty Line Between Yaml and Header\n- move-math-block-indicators-to-their-own-line\n\t- Move all starting and ending math block indicators to their own lines\n\t\t- 将数学块换行\n\t\t- 开启\n- remove-space-around-characters\n\t- Ensures that certain characters are not surrounded by whitespace\n\t\t- 确保字符周围的空格符合规范\n\t\t- 开启。开启全宽、CJK 字符选项\n- space-after-list-markers\n\t- There should be a single space after list markers and checkboxes\n\t\t- 移除列表标记和内容中间的空格\n\t\t- 开启\n- space-between-chinese-japanese-or-korean-and-english-or-numbers\n\t- Ensures that Chinese, Japanese, or Korean and English or numbers are separated by a single space\n\t\t- 中文字符串和英文字符之间应该由一个空格间隔\n\t\t- 开启\n\n### Paste\n\n暂不作任何配置\n\n### YAML\n\n- force-yaml-escape\n\t- Escapes the values for the specified YAML keys\n\t\t- 对于特定 YAML keys 使用引号标记\n\t\t- 开启。保持 `title`、`aliases` YAML keys 风格一致\n- format-yaml-array\n\t- Allows for the formatting of regular yaml arrays\n\t\t- Format yaml aliases section\n\t\t- Format yaml tags section\n\t\t\t- 格式化 YAML aliases 和 tags \n\t\t\t- 开启\n\t\t- Default yaml array section style\n\t\t\t- 默认 YAML array 格式\n\t\t\t- 开启。设置为多行\n\t\t- Force key values to be multi-line arrays\n\t\t\t- 强制 aliases、tags 为多行 arrays\n\t\t\t- 开启\n- yaml-timestamp\n\t- Keep track of the date the file was last edited in the YAML front matter\n\t- 保存时更新时间。由于模板创建时会存在 created key，因此这里仅更新 modified 时间","lastmodified":"2023-08-02T07:55:31.274056124Z","tags":["graph","obsidian"]},"/zh-cn/graphs/tag-define":{"title":"tags define","content":"## 图谱标签\n\n图谱标签的目的在于管理笔记\n\n- entity  \n  明确的知识、概念。相当于知识图谱中的节点\n- links  \n  entities 的简单集合。通常是由一些 entities 组成的列表。相当于知识图谱中的超边\n- graph  \n  entities 的复杂集合。使用文字将概念组合，是可以完整阅读的文章。相当于可以阅读的知识图谱\n\n## 内容标签\n\n内容标签的目的在于对内容进行分类\n\n- career  \n  关于求职与职业生涯规划\n- dev-ops  \n  运维相关的知识\n- computer-science  \n  计算机科学相关的知识\n- large-language-models  \n  关于大语言模型的知识\n- nature-language-processing  \n  自然语言处理相关的知识\n- knowledge-manage-systems  \n  关于知识管理系统的知识\n- obsidian\n  关于 Obsidian 软件的知识","lastmodified":"2023-08-02T07:55:31.274056124Z","tags":["graph","knowledge-manage-systems"]},"/zh-cn/links/cfw":{"title":"cfw","content":"\n- [mixin](entities/mixin.md)\n","lastmodified":"2023-08-02T07:55:31.274056124Z","tags":["link","dev-ops"]},"/zh-cn/links/shell":{"title":"shell","content":"\n本篇 wiki 主要与命令行内容相关\n\n- [conda](entities/conda.md)\n- [rsync](entities/rsync.md)\n- [unix tools](entities/unix-tools.md)","lastmodified":"2023-08-02T07:55:31.274056124Z","tags":["link","dev-ops"]},"/zh-cn/tags/career/":{"title":"career","content":"","lastmodified":"2023-08-02T07:55:31.274056124Z","tags":[]},"/zh-cn/tags/computer-science/":{"title":"computer-science","content":"","lastmodified":"2023-08-02T07:55:31.274056124Z","tags":[]},"/zh-cn/tags/dev-ops/":{"title":"dev-ops","content":"","lastmodified":"2023-08-02T07:55:31.274056124Z","tags":[]},"/zh-cn/tags/entity/":{"title":"entity","content":"","lastmodified":"2023-08-02T07:55:31.274056124Z","tags":[]},"/zh-cn/tags/graph/":{"title":"graph","content":"","lastmodified":"2023-08-02T07:55:31.274056124Z","tags":[]},"/zh-cn/tags/knowledge-manage-systems/":{"title":"knowledge-manage-systems","content":"","lastmodified":"2023-08-02T07:55:31.274056124Z","tags":[]},"/zh-cn/tags/large-language-models/":{"title":"large-language-models","content":"","lastmodified":"2023-08-02T07:55:31.274056124Z","tags":[]},"/zh-cn/tags/link/":{"title":"link","content":"","lastmodified":"2023-08-02T07:55:31.274056124Z","tags":[]},"/zh-cn/tags/nature-language-processing/":{"title":"nature-language-processing","content":"","lastmodified":"2023-08-02T07:55:31.274056124Z","tags":[]},"/zh-cn/tags/obsidian":{"title":"obsidian","content":"","lastmodified":"2023-08-02T07:55:31.274056124Z","tags":[]}}